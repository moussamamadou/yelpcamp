# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  username: String
  password: PasswordState
  campgrounds(
    where: CampgroundWhereInput! = {}
    orderBy: [CampgroundOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Campground!]
  campgroundsCount(where: CampgroundWhereInput! = {}): Int
  comments(
    where: CommentWhereInput! = {}
    orderBy: [CommentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Comment!]
  commentsCount(where: CommentWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  username: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  username: StringFilter
  campgrounds: CampgroundManyRelationFilter
  comments: CommentManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input CampgroundManyRelationFilter {
  every: CampgroundWhereInput
  some: CampgroundWhereInput
  none: CampgroundWhereInput
}

input CommentManyRelationFilter {
  every: CommentWhereInput
  some: CommentWhereInput
  none: CommentWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  username: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  username: String
  password: String
  campgrounds: CampgroundRelateToManyForUpdateInput
  comments: CommentRelateToManyForUpdateInput
}

input CampgroundRelateToManyForUpdateInput {
  disconnect: [CampgroundWhereUniqueInput!]
  set: [CampgroundWhereUniqueInput!]
  create: [CampgroundCreateInput!]
  connect: [CampgroundWhereUniqueInput!]
}

input CommentRelateToManyForUpdateInput {
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  create: [CommentCreateInput!]
  connect: [CommentWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  username: String
  password: String
  campgrounds: CampgroundRelateToManyForCreateInput
  comments: CommentRelateToManyForCreateInput
}

input CampgroundRelateToManyForCreateInput {
  create: [CampgroundCreateInput!]
  connect: [CampgroundWhereUniqueInput!]
}

input CommentRelateToManyForCreateInput {
  create: [CommentCreateInput!]
  connect: [CommentWhereUniqueInput!]
}

type Campground {
  id: ID!
  name: String
  price: Float
  description: String
  image: String
  author: User
  comments(
    where: CommentWhereInput! = {}
    orderBy: [CommentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Comment!]
  commentsCount(where: CommentWhereInput! = {}): Int
  date: DateTime
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input CampgroundWhereUniqueInput {
  id: ID
}

input CampgroundWhereInput {
  AND: [CampgroundWhereInput!]
  OR: [CampgroundWhereInput!]
  NOT: [CampgroundWhereInput!]
  id: IDFilter
  name: StringFilter
  price: FloatNullableFilter
  description: StringFilter
  image: StringFilter
  author: UserWhereInput
  comments: CommentManyRelationFilter
  date: DateTimeNullableFilter
}

input FloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input CampgroundOrderByInput {
  id: OrderDirection
  name: OrderDirection
  price: OrderDirection
  description: OrderDirection
  image: OrderDirection
  date: OrderDirection
}

input CampgroundUpdateInput {
  name: String
  price: Float
  description: String
  image: String
  author: UserRelateToOneForUpdateInput
  comments: CommentRelateToManyForUpdateInput
  date: DateTime
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input CampgroundUpdateArgs {
  where: CampgroundWhereUniqueInput!
  data: CampgroundUpdateInput!
}

input CampgroundCreateInput {
  name: String
  price: Float
  description: String
  image: String
  author: UserRelateToOneForCreateInput
  comments: CommentRelateToManyForCreateInput
  date: DateTime
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Comment {
  id: ID!
  description: String
  author: User
  campgrounds: Campground
  date: DateTime
}

input CommentWhereUniqueInput {
  id: ID
}

input CommentWhereInput {
  AND: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
  id: IDFilter
  description: StringFilter
  author: UserWhereInput
  campgrounds: CampgroundWhereInput
  date: DateTimeNullableFilter
}

input CommentOrderByInput {
  id: OrderDirection
  description: OrderDirection
  date: OrderDirection
}

input CommentUpdateInput {
  description: String
  author: UserRelateToOneForUpdateInput
  campgrounds: CampgroundRelateToOneForUpdateInput
  date: DateTime
}

input CampgroundRelateToOneForUpdateInput {
  create: CampgroundCreateInput
  connect: CampgroundWhereUniqueInput
  disconnect: Boolean
}

input CommentUpdateArgs {
  where: CommentWhereUniqueInput!
  data: CommentUpdateInput!
}

input CommentCreateInput {
  description: String
  author: UserRelateToOneForCreateInput
  campgrounds: CampgroundRelateToOneForCreateInput
  date: DateTime
}

input CampgroundRelateToOneForCreateInput {
  create: CampgroundCreateInput
  connect: CampgroundWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createCampground(data: CampgroundCreateInput!): Campground
  createCampgrounds(data: [CampgroundCreateInput!]!): [Campground]
  updateCampground(
    where: CampgroundWhereUniqueInput!
    data: CampgroundUpdateInput!
  ): Campground
  updateCampgrounds(data: [CampgroundUpdateArgs!]!): [Campground]
  deleteCampground(where: CampgroundWhereUniqueInput!): Campground
  deleteCampgrounds(where: [CampgroundWhereUniqueInput!]!): [Campground]
  createComment(data: CommentCreateInput!): Comment
  createComments(data: [CommentCreateInput!]!): [Comment]
  updateComment(
    where: CommentWhereUniqueInput!
    data: CommentUpdateInput!
  ): Comment
  updateComments(data: [CommentUpdateArgs!]!): [Comment]
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteComments(where: [CommentWhereUniqueInput!]!): [Comment]
  endSession: Boolean!
  authenticateUserWithPassword(
    username: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  username: String
  password: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  campgrounds(
    where: CampgroundWhereInput! = {}
    orderBy: [CampgroundOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Campground!]
  campground(where: CampgroundWhereUniqueInput!): Campground
  campgroundsCount(where: CampgroundWhereInput! = {}): Int
  comments(
    where: CommentWhereInput! = {}
    orderBy: [CommentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Comment!]
  comment(where: CommentWhereUniqueInput!): Comment
  commentsCount(where: CommentWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
